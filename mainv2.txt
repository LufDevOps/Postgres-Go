package main

import (
	"log"
	"os"
	"strings"

	"github.com/argoproj/argo-cd/pkg/apiclient"
	"github.com/argoproj/argo-cd/pkg/apiclient/argocd"
	"github.com/argoproj/argo-cd/pkg/apis/application/v1alpha1"
	"github.com/argoproj/argo-cd/util/cli"
	"golang.org/x/net/context"
	"k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
)

func main() {
	// Load environment variables from .env file
	envVars, err := loadEnvFromFile(".env")
	if err != nil {
		log.Fatal("Error loading environment variables from .env file:", err)
	}

	// Create Kubernetes Secret
	secret := createSecret("my-app-secret", "your-namespace", envVars)

	// Apply the Secret using ArgoCD client
	conn, err := cli.GetClientConn()
	if err != nil {
		log.Fatal("Failed to establish connection to ArgoCD server:", err)
	}
	defer conn.Close()

	argocdServiceClient := argocd.NewServiceClient(apiclient.NewClient(conn))

	_, err = argocdServiceClient.CreateSecret(context.Background(), &v1alpha1.SecretCreateRequest{
		Secret: secret,
	})
	if err != nil {
		log.Fatal("Error creating Secret:", err)
	}

	log.Println("Secret created successfully and applied using ArgoCD.")
}

func loadEnvFromFile(filename string) (map[string]string, error) {
	envVars := make(map[string]string)

	file, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		parts := strings.SplitN(line, "=", 2)
		if len(parts) == 2 {
			envVars[parts[0]] = parts[1]
		}
	}

	if err := scanner.Err(); err != nil {
		return nil, err
	}

	return envVars, nil
}

func createSecret(name, namespace string, envVars map[string]string) *corev1.Secret {
	data := make(map[string][]byte)
	for key, value := range envVars {
		data[key] = []byte(value)
	}

	return &corev1.Secret{
		ObjectMeta: v1.ObjectMeta{
			Name:      name,
			Namespace: namespace,
		},
		Data: data,
	}
}

